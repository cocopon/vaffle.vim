*vaffle.txt*  Lightweight file manager for Vim.


                      ______                   __________                    ~
                  ___/__/__/__  __,  _________/ __/ __/ /____                ~
                 /__/__/__/__/  | | / / _  /_  __  __/ / _, /                ~
                /__/__/__/__/   | |/ / // /_/ / / / / / ___/                 ~
                  /__/__/       |___/___^__/_/ /_/ /_/____/                  ~
                                                                             ~
                       Sweet treat for file operations                       ~


==============================================================================
0. Contents                                                  *vaffle-contents*


1. Intro .................................. |vaffle-intro|
  1.1. Concept .............................. |vaffle-concept|
  1.2. Story ................................ |vaffle-story|
  1.3. Requirements ......................... |vaffle-requirements|
2. Commands ............................... |vaffle-commands|
3. Key mappings ........................... |vaffle-key-mappings|
  3.1. Toggle selection ..................... |vaffle-key-mappings-toggle|
  3.2. Operations for the current item ...... |vaffle-key-mappings-current|
  3.3. Operations for selections ............ |vaffle-key-mappings-selected|
  3.4. Other operations ..................... |vaffle-key-mappings-others|
  3.5. Default key mappings ................. |vaffle-default-key-mappings|
4. Global options ......................... |vaffle-options|
5. Examples ............................... |vaffle-examples|
6. FAQ .................................... |vaffle-faq|
7. About .................................. |vaffle-about|


==============================================================================
1. Intro                                                        *vaffle-intro*


------------------------------------------------------------------------------
1.1. Concept                                                  *vaffle-concept*


Vaffle is...

  - a file manager >
    You can select, delete, move, rename files intuitively.
<
  - simple >
    Written in pure Vim script. Doesn't require any other plugins and not
    have too complex features: coping files, lazy loading, etc.
<

------------------------------------------------------------------------------
1.2. Story                                                      *vaffle-story*


There are already awesome file managers in the world: NERDTree, vimfiler,
Dirvish, etc. So why did I decide to develop a new file manager plugin from
scratch?

|NERDTree| is a popular file manager plugin and seems to be designed for large
window. But I uses Vim with heavy-split windows so I want to operate files
in a small window...!

|vimfiler| is full-featured file manager, maybe it can do all things you want
to do. But... it's too complex to customize and requires another plugin:
|unite|.

|dirvish| is also awesome file manager. But it's a "minimalist directory
viewer" and needs some effort to operate (select multiple, delete, move,
rename, ...) files.

I dreamed a file manager - that is suitable for small window, and is as simple
as Dirvish, and has intuitive user interface like vimfiler!


------------------------------------------------------------------------------
1.3. Requirements                                        *vaffle-requirements*


Vaffle requires Vim (>= 8.0) to access full features. It may work in earlier
version, but not supported.

  Feature Used     Supported Version ~
  ---------------  ----------------- ~
  |win_getid()|      v7.4.1557
  |win_gotoid()|     v7.4.1557
  |win_findbuf()|    v7.4.1558


==============================================================================
2. Commands                                                  *vaffle-commands*


:Vaffle                                                              *:Vaffle*
  Open the current working directory with Vaffle.

:Vaffle {file}                                                     *:Vaffle_f*
  Open {file} with Vaffle. If {file} is not a directory, open its parent
  directory and focus the file.


==============================================================================
3. Key mappings                                          *vaffle-key-mappings*


------------------------------------------------------------------------------
3.1. Toggle selection                             *vaffle-key-mappings-toggle*


*<Plug>(vaffle-toggle-all)*
  Toggle selections of all items.

*<Plug>(vaffle-toggle-current)*
  Toggle selection of the item under the cursor.


------------------------------------------------------------------------------
3.2. Operations for the current item             *vaffle-key-mappings-current*


*<Plug>(vaffle-open-current)*
  Open the item under the cursor.

*<Plug>(vaffle-open-current-tab)*
  Open the item under the cursor in a new tab.


------------------------------------------------------------------------------
3.3. Operations for selections                *vaffle-key-mappings-selections*


*<Plug>(vaffle-delete-selected)*
  Delete selected items.
  Note: Vaffle uses builtin function |delete()| to delete files, so cannot undo
  the operation.

*<Plug>(vaffle-fill-cmdline)*
  Fill the command-line with a list of selected items. Useful for passing
  their paths to a shell command.

*<Plug>(vaffle-move-selected)*
  Move selected items to specified directory.

*<Plug>(vaffle-open-selected)*
  Open selected items.

*<Plug>(vaffle-open-selected-split)*
  Open selected items under the cursor with a split window.

*<Plug>(vaffle-open-selected-vsplit)*
  Open selected items under the cursor with a split window, it will be split
  vertically.

*<Plug>(vaffle-rename-selected)*
  Rename selected items.


------------------------------------------------------------------------------
3.4. Other operations                             *vaffle-key-mappings-others*


*<Plug>(vaffle-chdir-here)*
  Change the current working directory to one the current buffer has opened.

*<Plug>(vaffle-mkdir)*
  Create a new directory in the current directory.

*<Plug>(vaffle-new-file)*
  Create a new file in the current directory.

*<Plug>(vaffle-open-home)*
  Open home directory.

*<Plug>(vaffle-open-parent)*
  Open the parent directory.

*<Plug>(vaffle-open-root)*
  Open the root directory.

*<Plug>(vaffle-quit)*
  Quit Vaffle and close the buffer.

*<Plug>(vaffle-refresh)*
  Refresh the buffer.

*<Plug>(vaffle-toggle-hidden)*
  Toggle visibility of hidden (dot-prefixed) items.


------------------------------------------------------------------------------
3.5. Default key mappings                        *vaffle-default-key-mappings*


  Mode  {lhs}     {rhs} ~
  ----  --------  -------------------------------- ~
  n     ~         |<Plug>(vaffle-open-home)|
  n     h         |<Plug>(vaffle-open-parent)|
  n     l         |<Plug>(vaffle-open-current)|
  n     t         |<Plug>(vaffle-open-current-tab)|

  n     *         |<Plug>(vaffle-toggle-all)|
  n     .         |<Plug>(vaffle-toggle-hidden)|
  nv    <Space>   |<Plug>(vaffle-toggle-current)|

  n     <CR>      |<Plug>(vaffle-open-selected)|
  n     m         |<Plug>(vaffle-move-selected)|
  n     d         |<Plug>(vaffle-delete-selected)|
  n     r         |<Plug>(vaffle-rename-selected)|

  n     q         |<Plug>(vaffle-quit)|
  n     o         |<Plug>(vaffle-mkdir)|
  n     R         |<Plug>(vaffle-refresh)|
  n     i         |<Plug>(vaffle-new-file)|
  n     x         |<Plug>(vaffle-fill-cmdline)|


==============================================================================
4. Global options                                             *vaffle-options*


*g:vaffle_auto_cd*
  (Default: 0)
  If enabled, changes the working directory to selected one automatically.

*g:vaffle_force_delete*
  (Default: 0)
  Vaffle doesn't delete non-empty directory by default. This option will lift
  the restriction.

*g:vaffle_show_hidden_files*
  (Default: 0)
  If enabled, Vaffle shows hidden files by default. You can toggle the option
  with |<Plug>(vaffle-toggle-hidden)| any time.

*g:vaffle_show_header*
  (Default: 0)
  Possible values: 0, 1
  If enabled, shows the current path in a header above the listed files

*g:vaffle_open_selected_split_position*
  (Default: '')
  Possible values: '', 'topleft' or 'rightbelow'
  Set the position of the new window of |<Plug>(vaffle-open-selected-split)|.

*g:vaffle_open_selected_vsplit_position*
  (Default: '')
  Possible values: '', 'topleft' or 'rightbelow'
  Set the position of the new window of |<Plug>(vaffle-open-selected-vsplit)|.

*g:vaffle_use_default_mappings*
  (Default: 1)
  If disabled, Vaffle doesn't set up the default mappings. To customize key
  mappings, see |vaffle-example-custom-key-mappings|.

*g:vaffle_render_custom_icon*
  (Default: '')
  If you want to render custom file type icon for each item, specify
  the function name. See |vaffle-example-file-type-icons|.

==============================================================================
5. Examples                                                  *vaffle-examples*


Customizing key mappings:                 *vaffle-example-custom-key-mappings*
>
  function! s:customize_vaffle_mappings() abort
    " Customize key mappings here
    nmap <buffer> <Bslash> <Plug>(vaffle-open-root)
    nmap <buffer> K        <Plug>(vaffle-mkdir)
    nmap <buffer> N        <Plug>(vaffle-new-file)
  endfunction

  augroup vimrc_vaffle
    autocmd!
    autocmd FileType vaffle call s:customize_vaffle_mappings()
  augroup END
<
Adding file type icons:                       *vaffle-example-file-type-icons*
>
  " Install devicons (https://github.com/ryanoasis/vim-devicons)

  function! VaffleRenderCustomIcon(item)
    return WebDevIconsGetFileTypeSymbol(a:item.basename, a:item.is_dir)
  endfunction

  let g:vaffle_render_custom_icon = 'VaffleRenderCustomIcon'
<

==============================================================================
6. FAQ                                                            *vaffle-faq*


Q: I want to use Vaffle with NERDTree, but |:Vaffle| opens NERDTree buffer...
A: Try adding the following command to your vimrc:
>
  let NERDTreeHijackNetrw = 0
<
Q: How to prevent "Press ENTER or ..." message after every action?
A: Try adding the following command to your vimrc:
>
  set cmdheight=2
<

==============================================================================
7. About                                                        *vaffle-about*


Vaffle is developed by cocopon and licensed under the MIT License.
Visit the project page for the latest information:

  https://github.com/cocopon/vaffle.vim


==============================================================================
vim:ft=help:norl:ts=8:tw=78:
